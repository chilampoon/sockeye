import pathlib
import os
import pandas as pd
from glob import glob
from itertools import product
from snakemake.utils import validate, min_version


##### load config and sample sheets #####
configfile: "config/config.yml"


SCRIPT_DIR = srcdir("scripts")
sample_sheet = pd.read_csv(config["runs"], sep=",", comment="#").set_index(
    "run_id", drop=True
)

##### set filenames #####
OUTPUT_BASE = pathlib.Path(config["OUTPUT_BASE"])


##### read values from sample sheet ####
RUN_IDS = sample_sheet.index


###################
# READ ADAPTER SCAN FILES
###################
COPIED_DIR = OUTPUT_BASE / "{run_id}" / "ingest"
COPIED_FILES = str(COPIED_DIR / "{batch_id}.fastq.gz")
ADAPTERS_DIR = OUTPUT_BASE / "{run_id}" / "adapters"
READ_CONFIG_CHUNKED = str(ADAPTERS_DIR / "{batch_id}.configs.tsv")
STRANDED_FQ_CHUNKED = str(ADAPTERS_DIR / "{batch_id}.stranded.fastq")
READ_CONFIG = str(ADAPTERS_DIR / "configs.tsv")
STRANDED_FQ = str(ADAPTERS_DIR / "reads.stranded.fastq")
CONFIG_STATS = str(ADAPTERS_DIR / "configs.stats.json")


###################
# REF ALIGN FILES
###################
REF_GENES_GTF = pathlib.Path(config["REF_GTF"])
REF_GENES_DIR = REF_GENES_GTF.parents[0]
REF_GENES_BED = str(REF_GENES_DIR / f'{REF_GENES_GTF.name.replace(".gtf", ".bed")}')
ALIGN_DIR = OUTPUT_BASE / "{run_id}" / "align"
REF_CHROM_SIZES = str(ALIGN_DIR / "chrom_sizes.tsv")
SAM_TMP = str(ALIGN_DIR / "tmp.sam")
BAM_UNSORT_TMP = str(ALIGN_DIR / "tmp.unsort.bam")
BAM_SORT = str(ALIGN_DIR / "sorted.bam")
BAM_SORT_BAI = str(ALIGN_DIR / "sorted.bam.bai")


###################
# BARCODE + UMI DEMUX FILES
###################
DEMUX_DIR = OUTPUT_BASE / "{run_id}" / "demux"
# All chrom files
BAM_BC_UNCORR_TMP = str(DEMUX_DIR / "bc_extract.tmp.sorted.bam")
BAM_BC_UNCORR = str(DEMUX_DIR / "bc_extract.sorted.bam")
BAM_BC_UNCORR_BAI = str(DEMUX_DIR / "bc_extract.sorted.bam.bai")
BARCODE_COUNTS = str(DEMUX_DIR / "uncorrected_bc_counts.tsv")
BARCODE_WHITELIST = str(DEMUX_DIR / "whitelist.tsv")
BARCODE_KNEEPLOT = str(DEMUX_DIR / "kneeplot.png")

# Chrom-specific files
SPLIT_DIR = DEMUX_DIR / "chroms"
CHROM_BAM_BC_UNCORR = str(SPLIT_DIR / "{chrom}.sorted.bam")
CHROM_BAM_BC_UNCORR_BAI = str(SPLIT_DIR / "{chrom}.sorted.bam.bai")
CHROM_BAM_BC_TMP = str(SPLIT_DIR / "{chrom}.bc_assign.tmp.sorted.bam")
CHROM_BAM_BC = str(SPLIT_DIR / "{chrom}.bc_assign.sorted.bam")
CHROM_BAM_BC_BAI = str(SPLIT_DIR / "{chrom}.bc_assign.sorted.bam.bai")
CHROM_ASSIGNED_BARCODE_COUNTS = str(SPLIT_DIR / "{chrom}.assigned_bc_counts.tsv")
CHROM_BAM_BC_GENE_TMP = str(SPLIT_DIR / "{chrom}.bc_assign.gene.tmp.sorted.bam")
CHROM_BAM_BC_GENE = str(SPLIT_DIR / "{chrom}.bc_assign.gene.sorted.bam")
CHROM_BAM_BC_GENE_BAI = str(SPLIT_DIR / "{chrom}.bc_assign.gene.sorted.bam.bai")
CHROM_BAM_FULLY_TAGGED_TMP = str(SPLIT_DIR / "{chrom}.tagged.tmp.sorted.bam")
CHROM_BAM_FULLY_TAGGED = str(SPLIT_DIR / "{chrom}.tagged.sorted.bam")
CHROM_BAM_FULLY_TAGGED_BAI = str(SPLIT_DIR / "{chrom}.tagged.sorted.bam.bai")
CHROM_FC_READ_ASSIGNS_TMP = str(
    SPLIT_DIR / "{chrom}.bc_assign.sorted.bam.featureCounts"
)
CHROM_FC_READ_ASSIGNS = str(SPLIT_DIR / "{chrom}.read.gene_assigns.tsv")
CHROM_FC_GENES = str(SPLIT_DIR / "{chrom}.gene_assigned")
CHROM_FC_SUMMARY = str(SPLIT_DIR / "{chrom}.gene_assigned.summary")

# Merged files
BAM_FULLY_TAGGED = str(DEMUX_DIR / "tagged.sorted.bam")
BAM_FULLY_TAGGED_BAI = str(DEMUX_DIR / "tagged.sorted.bam.bai")
ASSIGNED_BARCODE_COUNTS = str(DEMUX_DIR / "assigned_bc_counts.tsv")

###################
# LIBRARY SATURATION FILES
###################
SAT_DIR = OUTPUT_BASE / "{run_id}" / "saturation"
SAT_PLOT = str(SAT_DIR / "saturation_curves.png")


##### include rules #####
include: "rules/stranding.smk"
include: "rules/align.smk"
include: "rules/process_bams.smk"


##### target rules #####
rule all:
    input:
        # expand(STRANDED_FQ, run_id=RUN_IDS),
        expand(SAT_PLOT, run_id=RUN_IDS),
        # expand(ASSIGNED_BARCODE_COUNTS, run_id=RUN_IDS),

import pathlib
import os
import pandas as pd
from glob import glob
from itertools import product
from snakemake.utils import validate, min_version


##### load config and sample sheets #####
configfile: "config/config.yml"


SCRIPT_DIR = srcdir("scripts")
sample_sheet = pd.read_csv(config["runs"], sep=",", comment="#").set_index(
    "run_id", drop=True
)

##### set filenames #####
OUTPUT_BASE = pathlib.Path(config["OUTPUT_BASE"])


##### read values from sample sheet ####
RUN_IDS = sample_sheet.index


###################
# READ ADAPTER SCAN FILES
###################
COPIED_DIR = OUTPUT_BASE / "{run_id}" / "ingest"
COPIED_FILES = str(COPIED_DIR / "{batch_id}.fastq.gz")
ADAPTERS_DIR = OUTPUT_BASE / "{run_id}" / "adapters"
READ_CONFIG_CHUNKED = str(ADAPTERS_DIR / "{batch_id}.configs.tsv")
STRANDED_FQ_CHUNKED = str(ADAPTERS_DIR / "{batch_id}.stranded.fastq")
READ_CONFIG = str(ADAPTERS_DIR / "configs.tsv")
STRANDED_FQ = str(ADAPTERS_DIR / "reads.stranded.fastq")
CONFIG_STATS = str(ADAPTERS_DIR / "configs.stats.json")


###################
# REF ALIGN FILES
###################
REF_GENES_GTF = pathlib.Path(config["REF_GTF"])
REF_GENES_DIR = REF_GENES_GTF.parents[0]
REF_GENES_BED = str(REF_GENES_DIR / f'{REF_GENES_GTF.name.replace(".gtf", ".bed")}')
ALIGN_DIR = OUTPUT_BASE / "{run_id}" / "align"
REF_CHROM_SIZES = str(ALIGN_DIR / "chrom_sizes.tsv")
SAM_TMP = str(ALIGN_DIR / "tmp.sam")
BAM_UNSORT_TMP = str(ALIGN_DIR / "tmp.unsort.bam")
BAM_SORT = str(ALIGN_DIR / "sorted.bam")


###################
# BARCODE DEMUX FILES
###################
DEMUX_DIR = OUTPUT_BASE / "{run_id}" / "barcodes"
BAM_BC_UNCORR = str(DEMUX_DIR / "bc_uncorr.sorted.bam")
BARCODE_COUNTS = str(DEMUX_DIR / "barcode_counts.tsv")
BARCODE_CLUSTERS = str(DEMUX_DIR / "clusters.fasta")
BARCODE_WHITELIST = str(DEMUX_DIR / "whitelist.tsv")
BARCODE_KNEEPLOT = str(DEMUX_DIR / "kneeplot.png")
BAM_BC_CORR_UMI_UNCORR = str(DEMUX_DIR / "bc_corr.umi_uncorr.sorted.bam")
BAM_BC_CORR_UMI_UNCORR_GENE = str(DEMUX_DIR / "bc_corr.umi_uncorr.gene.sorted.bam")
BAM_BC_CORR_UMI_UNCORR_GENE_BAI = str(
    DEMUX_DIR / "bc_corr.umi_uncorr.gene.sorted.bam.bai"
)
BAM_BC_CORR_UMI_CORR_GENE = str(DEMUX_DIR / "bc_corr.umi_corr.gene.sorted.bam")
BAM_BC_CORR_UMI_CORR_GENE_BAI = str(DEMUX_DIR / "bc_corr.umi_corr.gene.sorted.bam.bai")


###################
# UMI DEMUX FILES
###################
UMI_DIR = OUTPUT_BASE / "{run_id}" / "umis"
UMI_EXTRACTED_READS = str(UMI_DIR / "reads.bc.umi.fastq")


###################
# FEATURECOUNTS FILES
###################
FC_DIR = OUTPUT_BASE / "{run_id}" / "features"
FC_READ_ASSIGNS_TMP = str(FC_DIR / "bc_corr.umi_uncorr.sorted.bam.featureCounts")
FC_READ_ASSIGNS = str(FC_DIR / "read.gene_assigns.tsv")
FC_GENES = str(FC_DIR / "gene_assigned")
FC_SUMMARY = str(FC_DIR / "gene_assigned.summary")


###################
# LIBRARY SATURATION FILES
###################
SAT_DIR = OUTPUT_BASE / "{run_id}" / "saturation"
SAT_PLOT = str(SAT_DIR / "saturation_curves.png")


##### include rules #####
include: "rules/stranding.smk"
include: "rules/barcodes.smk"
include: "rules/umis.smk"
include: "rules/align.smk"
include: "rules/features.smk"


##### target rules #####
rule all:
    input:
        # expand(READ_CONFIG, run_id=RUN_IDS),
        # expand(STRANDED_FQ, run_id=RUN_IDS),
        # expand(CONFIG_STATS, run_id=RUN_IDS),
        # expand(BARCODES_CORR_READS_FILTERED, run_id=RUN_IDS),
        # expand(BAM_SORT, run_id=RUN_IDS),
        # expand(FC_SUMMARY, run_id=RUN_IDS),
        # expand(BAM_BC_CORR_UMI_CORR_GENE, run_id=RUN_IDS),
        expand(SAT_PLOT, run_id=RUN_IDS),
